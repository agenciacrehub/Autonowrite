#!/usr/bin/env python3
"""
Script de Valida√ß√£o - AutonoWrite
Testes automatizados para verificar funcionamento do sistema
"""

import sys
import os
import traceback
from datetime import datetime

def test_imports():
    """Testa se todas as depend√™ncias est√£o instaladas"""
    print("üß™ Testando imports...")
    
    required_modules = [
        ("os", "Biblioteca padr√£o Python"),
        ("json", "Biblioteca padr√£o Python"), 
        ("datetime", "Biblioteca padr√£o Python"),
        ("typing", "Biblioteca padr√£o Python")
    ]
    
    optional_modules = [
        ("groq", "API Groq - pip install groq"),
        ("ollama", "Ollama local - pip install ollama"),
        ("dotenv", "Vari√°veis ambiente - pip install python-dotenv")
    ]
    
    # Testes obrigat√≥rios
    for module, desc in required_modules:
        try:
            __import__(module)
            print(f"   ‚úÖ {module} - {desc}")
        except ImportError as e:
            print(f"   ‚ùå {module} - ERRO: {e}")
            return False
    
    # Testes opcionais
    available_providers = []
    for module, desc in optional_modules:
        try:
            __import__(module)
            print(f"   ‚úÖ {module} - {desc}")
            if module in ['groq', 'ollama']:
                available_providers.append(module)
        except ImportError:
            print(f"   ‚ö†Ô∏è {module} - N√£o instalado: {desc}")
    
    if not available_providers:
        print("   ‚ö†Ô∏è Nenhum provider LLM dispon√≠vel - usar√° simula√ß√£o")
        available_providers.append("simulation")
    
    return True, available_providers

def test_environment():
    """Testa configura√ß√£o do ambiente"""
    print("\nüîß Testando ambiente...")
    
    # Testa arquivo .env
    env_file = ".env"
    if os.path.exists(env_file):
        print(f"   ‚úÖ Arquivo {env_file} encontrado")
        with open(env_file, 'r') as f:
            content = f.read()
            if "GROQ_API_KEY" in content:
                print("   ‚úÖ GROQ_API_KEY configurada")
            else:
                print("   ‚ö†Ô∏è GROQ_API_KEY n√£o encontrada")
    else:
        print(f"   ‚ö†Ô∏è Arquivo {env_file} n√£o encontrado")
    
    # Testa estrutura de diret√≥rios
    required_dirs = ["results", "experiments", "reports"]
    for dir_name in required_dirs:
        if os.path.exists(dir_name):
            print(f"   ‚úÖ Diret√≥rio {dir_name}/ encontrado")
        else:
            os.makedirs(dir_name, exist_ok=True)
            print(f"   üîß Diret√≥rio {dir_name}/ criado")
    
    # Testa permiss√µes de escrita
    test_file = "test_write.tmp"
    try:
        with open(test_file, 'w') as f:
            f.write("test")
        os.remove(test_file)
        print("   ‚úÖ Permiss√µes de escrita OK")
    except Exception as e:
        print(f"   ‚ùå Erro de permiss√µes: {e}")
        return False
    
    return True

def test_llm_providers(available_providers):
    """Testa conectividade com providers LLM"""
    print("\nü§ñ Testando providers LLM...")
    
    # Importa o c√≥digo principal
    try:
        sys.path.append('.')
        from main import LLMProvider
        print("   ‚úÖ Classe LLMProvider importada com sucesso")
    except ImportError as e:
        print(f"   ‚ùå Erro ao importar LLMProvider: {e}")
        print("   üí° Verifique se o arquivo main.py est√° no diret√≥rio atual")
        return False
    
    working_providers = []
    
    for provider in available_providers:
        try:
            print(f"   üîç Testando provider: {provider}")
            llm = LLMProvider(provider)
            
            # Teste simples
            response = llm.generate("Teste: responda apenas 'OK'", max_tokens=50)
            
            if response and len(response) > 0:
                print(f"   ‚úÖ {provider} funcionando (resposta: {len(response)} chars)")
                working_providers.append(provider)
            else:
                print(f"   ‚ö†Ô∏è {provider} retornou resposta vazia")
                
        except Exception as e:
            print(f"   ‚ùå {provider} falhou: {str(e)[:100]}...")
    
    if not working_providers:
        print("   ‚ùå Nenhum provider funcionando!")
        return False
    
    return True, working_providers

def test_system_integration(working_providers):
    """Testa integra√ß√£o completa do sistema"""
    print("\nüîó Testando integra√ß√£o do sistema...")
    
    try:
        from main import AutonoWriteSystem, LLMProvider
        
        # Usa o primeiro provider funcionando
        provider = working_providers[0]
        print(f"   üîß Usando provider: {provider}")
        
        llm = LLMProvider(provider)
        system = AutonoWriteSystem(llm)
        
        print("   ‚úÖ Sistema AutonoWrite inicializado")
        
        # Teste r√°pido com 1 itera√ß√£o
        print("   üß™ Executando teste r√°pido...")
        test_topic = "Teste de funcionamento do sistema"
        
        result = system.generate_content(test_topic, max_iterations=1)
        
        # Valida resultado
        required_keys = [
            'topic', 'final_content', 'final_score', 
            'iterations_used', 'execution_time_seconds'
        ]
        
        for key in required_keys:
            if key not in result:
                print(f"   ‚ùå Chave '{key}' ausente no resultado")
                return False
            print(f"   ‚úÖ {key}: {str(result[key])[:50]}...")
        
        print(f"   üìä Resultado do teste:")
        print(f"      - Score: {result['final_score']:.1f}/10")
        print(f"      - Tempo: {result['execution_time_seconds']:.1f}s")
        print(f"      - LLM calls: {result['llm_calls']}")
        
        return True, result
        
    except Exception as e:
        print(f"   ‚ùå Erro na integra√ß√£o: {e}")
        traceback.print_exc()
        return False

def test_experiment_framework():
    """Testa framework de experimentos"""
    print("\nüß™ Testando framework de experimentos...")
    
    try:
        from main import ExperimentRunner, AutonoWriteSystem, LLMProvider
        
        # Sistema m√≠nimo
        llm = LLMProvider("simulation")
        system = AutonoWriteSystem(llm)
        runner = ExperimentRunner(system)
        
        print("   ‚úÖ ExperimentRunner inicializado")
        
        # Teste mini-experimento
        test_topics = ["T√≥pico A", "T√≥pico B"]
        iterations_list = [1, 2]
        
        print("   üèÉ Executando mini-experimento...")
        experiment_result = runner.run_comparative_experiment(test_topics, iterations_list)
        
        # Valida estrutura do experimento
        required_keys = ['experiment_id', 'topics', 'configurations', 'summary']
        for key in required_keys:
            if key not in experiment_result:
                print(f"   ‚ùå Chave '{key}' ausente no experimento")
                return False
        
        print("   ‚úÖ Experimento executado com sucesso")
        print(f"   üìä Configura√ß√µes testadas: {len(experiment_result['configurations'])}")
        print(f"   üìà Melhoria de qualidade: {experiment_result['summary']['quality_improvement_percent']}%")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro no framework de experimentos: {e}")
        return False

def test_file_operations():
    """Testa opera√ß√µes de arquivo"""
    print("\nüíæ Testando opera√ß√µes de arquivo...")
    
    try:
        from main import AutonoWriteSystem, LLMProvider
        import json
        
        llm = LLMProvider("simulation")
        system = AutonoWriteSystem(llm)
        
        # Gera resultado de teste
        result = system.generate_content("Teste de salvamento", max_iterations=1)
        
        # Testa salvamento
        filepath = system.save_result(result, "test_result.json")
        
        if os.path.exists(filepath):
            print("   ‚úÖ Arquivo salvo com sucesso")
            
            # Testa leitura
            with open(filepath, 'r', encoding='utf-8') as f:
                loaded_data = json.load(f)
            
            if loaded_data['topic'] == result['topic']:
                print("   ‚úÖ Arquivo carregado corretamente")
            else:
                print("   ‚ùå Dados corrompidos no arquivo")
                return False
            
            # Limpa arquivo de teste
            os.remove(filepath)
            print("   üßπ Arquivo de teste removido")
            
        else:
            print("   ‚ùå Arquivo n√£o foi salvo")
            return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro nas opera√ß√µes de arquivo: {e}")
        return False

def run_validation_suite():
    """Executa suite completa de valida√ß√£o"""
    print("=" * 60)
    print("üî¨ SUITE DE VALIDA√á√ÉO - AUTONOWRITE")
    print("=" * 60)
    print(f"Iniciado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    tests = [
        ("Imports e Depend√™ncias", test_imports),
        ("Configura√ß√£o do Ambiente", test_environment),
        ("Conectividade LLM", None),  # Ser√° chamado com par√¢metro
        ("Integra√ß√£o do Sistema", None),  # Ser√° chamado com par√¢metro
        ("Framework de Experimentos", test_experiment_framework),
        ("Opera√ß√µes de Arquivo", test_file_operations)
    ]
    
    results = {}
    
    # Teste 1: Imports
    result = test_imports()
    if isinstance(result, tuple):
        success, available_providers = result
        results["imports"] = success
    else:
        results["imports"] = result
        if not result:
            print("\n‚ùå Falha cr√≠tica nos imports. Abortando testes.")
            return results
    
    # Teste 2: Ambiente
    results["environment"] = test_environment()
    if not results["environment"]:
        print("\n‚ö†Ô∏è Problemas no ambiente, mas continuando...")
    
    # Teste 3: Providers LLM
    if 'available_providers' in locals():
        llm_result = test_llm_providers(available_providers)
        if isinstance(llm_result, tuple):
            results["llm_providers"], working_providers = llm_result
        else:
            results["llm_providers"] = llm_result
            working_providers = ["simulation"]
    else:
        results["llm_providers"] = False
        working_providers = ["simulation"]
    
    # Teste 4: Integra√ß√£o do Sistema
    if working_providers:
        integration_result = test_system_integration(working_providers)
        if isinstance(integration_result, tuple):
            results["system_integration"], test_result = integration_result
        else:
            results["system_integration"] = integration_result
    else:
        results["system_integration"] = False
    
    # Teste 5: Framework de Experimentos
    results["experiments"] = test_experiment_framework()
    
    # Teste 6: Opera√ß√µes de Arquivo
    results["file_operations"] = test_file_operations()
    
    # Sum√°rio final
    print("\n" + "=" * 60)
    print("üìä SUM√ÅRIO DA VALIDA√á√ÉO")
    print("=" * 60)
    
    passed = sum(1 for r in results.values() if r)
    total = len(results)
    
    for test_name, passed_status in results.items():
        status = "‚úÖ PASSOU" if passed_status else "‚ùå FALHOU"
        print(f"{test_name:25} {status}")
    
    print("-" * 40)
    print(f"Total: {passed}/{total} testes passaram ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Sistema pronto para uso")
        print("\nüìã Pr√≥ximos passos:")
        print("1. Execute: python main.py")
        print("2. Teste gera√ß√£o de conte√∫do √∫nico")
        print("3. Execute experimento comparativo")
    elif passed >= total * 0.8:
        print("\n‚ö†Ô∏è MAIORIA DOS TESTES PASSOU")
        print("‚úÖ Sistema utiliz√°vel com limita√ß√µes")
        print("üîß Revise os testes que falharam acima")
    else:
        print("\n‚ùå MUITOS TESTES FALHARAM")
        print("üîß Sistema precisa de corre√ß√µes antes do uso")
        print("üí° Revise o guia de setup e depend√™ncias")
    
    return results

def generate_validation_report(results):
    """Gera relat√≥rio de valida√ß√£o"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    report_content = f"""# Relat√≥rio de Valida√ß√£o - AutonoWrite

**Data**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Sistema**: {os.name} - Python {sys.version.split()[0]}

## Resultados dos Testes

"""
    
    for test_name, result in results.items():
        status = "PASSOU" if result else "FALHOU"
        report_content += f"- **{test_name}**: {status}\n"
    
    passed = sum(1 for r in results.values() if r)
    total = len(results)
    
    report_content += f"""
## Sum√°rio
- **Testes Executados**: {total}
- **Testes Aprovados**: {passed}
- **Taxa de Sucesso**: {passed/total*100:.1f}%

## Status do Sistema
"""
    
    if passed == total:
        report_content += "‚úÖ **Sistema APROVADO** - Pronto para uso em produ√ß√£o\n"
    elif passed >= total * 0.8:
        report_content += "‚ö†Ô∏è **Sistema FUNCIONAL** - Utiliz√°vel com limita√ß√µes\n"
    else:
        report_content += "‚ùå **Sistema N√ÉO APROVADO** - Requer corre√ß√µes\n"
    
    # Salvar relat√≥rio
    os.makedirs("reports", exist_ok=True)
    report_file = f"reports/validation_report_{timestamp}.md"
    
    try:
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report_content)
        print(f"\nüìÑ Relat√≥rio salvo em: {report_file}")
    except Exception as e:
        print(f"‚ö†Ô∏è N√£o foi poss√≠vel salvar relat√≥rio: {e}")

if __name__ == "__main__":
    try:
        results = run_validation_suite()
        generate_validation_report(results)
        
        print(f"\n‚è∞ Valida√ß√£o conclu√≠da em: {datetime.now().strftime('%H:%M:%S')}")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Valida√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro fatal na valida√ß√£o: {e}")
        traceback.print_exc()